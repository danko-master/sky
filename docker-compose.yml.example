services:
  postgres:
    container_name: pg_fly_data_container
    image: postgres:17.6
    restart: unless-stopped
    environment:
      POSTGRES_DB: "pegasdb"
      POSTGRES_USER: "teleuser"
      POSTGRES_PASSWORD: extR3@der
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - pegasdb-data:/var/lib/postgresql/data
      - ./fly-db/docker-entrypoint-initdb.d/01_init.sql:/docker-entrypoint-initdb.d/01_init.sql # Создаём таблицы
    ports:
      - "5401:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U teleuser -d pegasdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 4G
    networks:
      - dbnet

  postgres-master:
    container_name: pg_fly_report_master_container
    image: timescale/timescaledb-ha:pg17
    restart: unless-stopped
    user: "root"
    environment:
      POSTGRES_DB: "zeusdb"
      POSTGRES_USER: "teleuser"
      POSTGRES_PASSWORD: extR3@der
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - zeusdb-master-timescale-data:/var/lib/postgresql/data
      - ./fly-report-db/docker-entrypoint-initdb.d/01_master-init.sh:/docker-entrypoint-initdb.d/01_master-init.sh # Настройки мастера
      - ./fly-report-db/docker-entrypoint-initdb.d/02_init.sql:/docker-entrypoint-initdb.d/02_init.sql # Создаём компоненты БД
      # - ./docker-entrypoint-initdb.d/03_publication.sql:/docker-entrypoint-initdb.d/03_publication.sql # Настройки репликации
      - ./fly-report-db/docker-entrypoint-initdb.d/05_starting_data.sql:/docker-entrypoint-initdb.d/05_starting_data.sql # Вставка данных
    ports:
      - "5402:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U teleuser -d zeusdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 4G
    networks:
      - dbnet

  # minio:
  #   image: minio/minio:RELEASE.2025-09-07T16-13-09Z
  #   container_name: minio
  #   command: server /data --console-address ":9001"
  #   environment:
  #     MINIO_ROOT_USER: minioadmin
  #     MINIO_ROOT_PASSWORD: minioadmin
  #   volumes:
  #     - minio_data:/data
  #   ports:
  #     - "9000:9000" # MinIO API port
  #     - "9001:9001" # MinIO Console port
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3

  # createbuckets:
  #   image: minio/minio:RELEASE.2025-09-07T16-13-09Z
  #   depends_on:
  #     - minio
  #   restart: on-failure
  #   entrypoint: >
  #     /bin/sh -c "
  #     sleep 5;
  #     /usr/bin/mc alias set dockerminio http://minio:9000 minioadmin minioadmin;
  #     /usr/bin/mc mb dockerminio/fly-telegraph;
  #     exit 0;
  #     "

  # zookeeper:
  #   container_name: fly-line-zookeeper
  #   image: confluentinc/cp-zookeeper:latest
  #   hostname: zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - 2181:2181
  #   networks:
  #     - dbnet

  # kafka:
  #   container_name: fly-line-kafka
  #   image: confluentinc/cp-kafka:latest
  #   hostname: kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 9092:9092
  #     - 9997:9997
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_PROCESS_ROLES: broker,controller
  #     KAFKA_NODE_ID: 1
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
  #     KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
  #     CLUSTER_ID: NkU2OEVBMTcwNTJENDM3Qk
  #     KAFKA_JMX_PORT: 9997
  #     KAFKA_JMX_HOSTNAME: kafka
  #     # KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  #     # Время жизни 900 сек
  #     KAFKA_LOG_RETENTION_MS: 900000
  #     # Интервал проверки удаленного сообщения
  #     KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 5000
  #   healthcheck:
  #     test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 20
  #     start_period: 30s
  #   networks:
  #     - dbnet

  # kafka-ui:
  #   container_name: fly-line-kafka-ui
  #   image: provectuslabs/kafka-ui
  #   depends_on:
  #     - kafka
  #   ports:
  #     - 8090:8080
  #   restart: always
  #   environment:
  #     # - DYNAMIC_CONFIG_ENABLED=true
  #     - KAFKA_CLUSTERS_0_NAME=local-kafka-cluster
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
  #     - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
  #   networks:
  #     - dbnet

  # Добавим топики для брокера
  # init-kafka:
  #   image: confluentinc/cp-kafka:latest
  #   networks:
  #     - dbnet
  #   depends_on:
  #     - kafka
  #   entrypoint: ["/bin/sh", "-c"]
  #   command: |
  #     "
  #     # blocks until kafka is reachable
  #     kafka-topics --bootstrap-server kafka:29092 --list

  #     echo -e 'Creating kafka topics'
  #     kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic topic-fly-status --replication-factor 1 --partitions 1
  #     kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic topic-fly-file --replication-factor 1 --partitions 1
  #     kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic topic-fly-file-line --replication-factor 1 --partitions 1

  #     echo -e 'Successfully created the following topics:'
  #     kafka-topics --bootstrap-server kafka:29092 --list
  #     "

  # go-status:
  #   build: ./worker-status
  #   image: worker-status:${CORE_TAG-latest}
  #   container_name: fly_go_status
  #   networks:
  #     - dbnet
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #     postgres-master:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     KAFKA_BROKER: kafka:29092
  #     KAFKA_TOPIC: topic-fly-status
  #     KAFKA_GROUP: topic-fly-file
  #     DB_HOST: postgres
  #     DB_PORT: 5432
  #     DB_NAME: pegasdb
  #     DB_USER: teleuser
  #     DB_PASSWORD: extR3@der

  # go-file-reader:
  #   build: ./worker-file-reader
  #   image: worker-file-reader:${CORE_TAG-latest}
  #   container_name: fly_go_file_reader
  #   extra_hosts:
  #     - "host.docker.internal:host-gateway"
  #   networks:
  #     - dbnet
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #     postgres-master:
  #       condition: service_healthy
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     KAFKA_BROKER: kafka:29092
  #     KAFKA_TOPIC: topic-fly-file # Основной топик чтения
  #     KAFKA_GROUP: topic-fly-file # Группа чтения
  #     KAFKA_TOPIC_STATUS: topic-fly-status # Топик отправки сообщения, следующий "топик в звене"
  #     MINIO_ENDPOINT: host.docker.internal
  #     MINIO_PORT: 9000
  #     MINIO_ROOT_USER: minioadmin
  #     MINIO_ROOT_PASSWORD: minioadmin
  #     MINIO_BUCKET_NAME: fly-telegraph
  #     DB_HOST: postgres-master
  #     DB_PORT: 5432
  #     DB_NAME: zeusdb
  #     DB_USER: teleuser
  #     DB_PASSWORD: extR3@der

  web:
    image: fly-app:${CORE_TAG-latest}
    container_name: fly_arm
    ports:
      - "3330:3330"
    build:
      context: ./fly-app
      dockerfile: Dockerfile
      args:
        DB_HOST: postgres
        DB_PORT: 5432
        DB_NAME: pegasdb
        DB_USER: teleuser
        DB_PASSWORD: extR3@der
        REPORT_DB_HOST: postgres-master
        REPORT_DB_PORT: 5432
        REPORT_DB_NAME: zeusdb
        REPORT_DB_USER: teleuser
        REPORT_DB_PASSWORD: extR3@der
        MINIO_ENDPOINT: host.docker.internal
        MINIO_PORT: 9000
        MINIO_ROOT_USER: minioadmin
        MINIO_ROOT_PASSWORD: minioadmin
        MINIO_BUCKET_NAME: fly-telegraph
        KAFKA_BROKER: kafka:29092
        KAFKA_TOPIC: topic-fly-file
        NEXT_PUBLIC_MAP_STAT_ZOOM_LEVEL: 3
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - .:/arm
      - ./node_modules:/arm/node_modules
    networks:
      - dbnet
    depends_on:
      # minio:
      #   condition: service_healthy
      # kafka:
      #   condition: service_healthy
      postgres-master:
        condition: service_healthy
      postgres:
        condition: service_healthy
    # environment:
    #   DB_HOST: postgres
    #   DB_PORT: 5432
    #   DB_NAME: pegasdb
    #   DB_USER: teleuser
    #   DB_PASSWORD: extR3@der
    #   REPORT_DB_HOST: postgres-master
    #   REPORT_DB_PORT: 5432
    #   REPORT_DB_NAME: zeusdb
    #   REPORT_DB_USER: teleuser
    #   REPORT_DB_PASSWORD: extR3@der
    #   MINIO_ENDPOINT: minio
    #   MINIO_PORT: 9000
    #   MINIO_ROOT_USER: minioadmin
    #   MINIO_ROOT_PASSWORD: minioadmin
    #   MINIO_BUCKET_NAME: fly-telegraph
    #   KAFKA_BROKER: kafka:29092
    #   KAFKA_TOPIC: topic-fly-file
    #   NEXT_PUBLIC_MAP_STAT_ZOOM_LEVEL: 3

networks:
  dbnet:
    driver: bridge

volumes:
  pegasdb-data:
  zeusdb-master-timescale-data:
  # minio_data:
  node_modules:
